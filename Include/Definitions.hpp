/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Definitions.hpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: psenko <psenko@student.42heilbronn.de>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/25 00:37:03 by auplisas          #+#    #+#             */
/*   Updated: 2025/07/26 11:03:29 by psenko           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DEFINITIONS_HPP
# define DEFINITIONS_HPP

#define ERR_NOSUCHNICK(nickname) (std::string(":server 401 ") + nickname + " :No such nick/channel\r\n")
#define ERR_NOSUCHSERVER(servername) (std::string(":server 402 ") + servername + " :No such server\r\n")
#define ERR_NOSUCHCHANNEL(channelname) (std::string(":server 403 ") + channelname + " :No such channel\r\n")
#define ERR_CANNOTSENDTOCHAN(channelname) (std::string(":server 404 ") + channelname + " :Cannot send to channel\r\n")
#define ERR_TOOMANYCHANNELS(channelname) (std::string(":server 405 ") + channelname + " :You have joined too many channels\r\n")
#define ERR_WASNOSUCHNICK(nickname) (std::string(":server 406 ") + nickname + " :There was no such nickname\r\n")
#define ERR_TOOMANYTARGETS(target) (std::string(":server 407 ") + target + " :Duplicate recipients. No message delivered\r\n")
#define ERR_NOORIGIN() (std::string(":server 409 :No origin specified\r\n"))
#define ERR_NORECIPIENT(command) (std::string(":server 411 :No recipient given (") + command + ")\r\n")
#define ERR_NOTEXTTOSEND() (std::string(":server 412 :No text to send\r\n"))
#define ERR_NOTOPLEVEL(mask) (std::string(":server 413 ") + mask + " :No toplevel domain specified\r\n")
#define ERR_WILDTOPLEVEL(mask) (std::string(":server 414 ") + mask + " :Wildcard in toplevel domain\r\n")
#define ERR_UNKNOWNCOMMAND(command) (std::string(":server 421 ") + command + " :Unknown command\r\n")
#define ERR_NOMOTD() (std::string(":server 422 :MOTD File is missing\r\n"))
#define ERR_NOADMININFO(server) (std::string(":server 423 ") + server + " :No administrative info available\r\n")
#define ERR_FILEERROR(fileop, file) (std::string(":server 424 :File error doing ") + fileop + " on " + file + "\r\n")
#define ERR_NONICKNAMEGIVEN() (std::string(":server 431 :No nickname given\r\n"))
#define ERR_ERRONEUSNICKNAME(nick) (std::string(":server 432 ") + nick + " :Erroneus nickname\r\n")
#define ERR_NICKNAMEINUSE(nick) (std::string(":server 433 ") + nick + " :Nickname is already in use\r\n")
#define ERR_NICKCOLLISION(nick) (std::string(":server 436 ") + nick + " :Nickname collision KILL\r\n")
#define ERR_USERNOTINCHANNEL(nick, channel) (std::string(":server 441 ") + nick + " " + channel + " :They aren't on that channel\r\n")
#define ERR_NOTONCHANNEL(channel) (std::string(":server 442 ") + channel + " :You're not on that channel\r\n")
#define ERR_USERONCHANNEL(user, channel) (std::string(":server 443 ") + user + " " + channel + " :is already on channel\r\n")
#define ERR_NOLOGIN(user) (std::string(":server 444 ") + user + " :User not logged in\r\n")
#define ERR_SUMMONDISABLED() (std::string(":server 445 :SUMMON has been disabled\r\n"))
#define ERR_USERSDISABLED() (std::string(":server 446 :USERS has been disabled\r\n"))
#define ERR_NOTREGISTERED() (std::string(":server 451 :You have not registered\r\n"))
#define ERR_NEEDMOREPARAMS(command) (std::string(":server 461 ") + command + " :Not enough parameters\r\n")
#define ERR_ALREADYREGISTRED() (std::string(":server 462 :You may not reregister\r\n"))
#define ERR_NOPERMFORHOST() (std::string(":server 463 :Your host isn't among the privileged\r\n"))
#define ERR_PASSWDMISMATCH() (std::string(":server 464 :Password incorrect\r\n"))
#define ERR_YOUREBANNEDCREEP() (std::string(":server 465 :You are banned from this server\r\n"))
#define ERR_KEYSET(channel) (std::string(":server 467 ") + channel + " :Channel key already set\r\n")
#define ERR_CHANNELISFULL(channel) (std::string(":server 471 ") + channel + " :Cannot join channel (+l)\r\n")
#define ERR_UNKNOWNMODE(char) (std::string(":server 472 ") + char + " :is unknown mode char to me\r\n")
#define ERR_INVITEONLYCHAN(channel) (std::string(":server 473 ") + channel + " :Cannot join channel (+i)\r\n")
#define ERR_BANNEDFROMCHAN(channel) (std::string(":server 474 ") + channel + " :Cannot join channel (+b)\r\n")
#define ERR_BADCHANNELKEY(channel) (std::string(":server 475 ") + channel + " :Cannot join channel (+k)\r\n")
#define ERR_NOPRIVILEGES() (std::string(":server 481 :Permission Denied- You're not an IRC operator\r\n"))
#define ERR_CHANOPRIVSNEEDED(channel) (std::string(":server 482 ") + channel + " :You're not channel operator\r\n")
#define ERR_CANTKILLSERVER() (std::string(":server 483 :You cant kill a server!\r\n"))
#define ERR_NOOPERHOST() (std::string(":server 491 :No O-lines for your host\r\n"))
#define ERR_UMODEUNKNOWNFLAG() (std::string(":server 501 :Unknown MODE flag\r\n"))
#define ERR_USERSDONTMATCH() (std::string(":server 502 :Cant change mode for other users\r\n"))

#define RPL_WELCOME(nick) (std::string(":server 001 ") + nick + " :Welcome to the IRC server " + nick + "\r\n")

#define RPL_NONE() (std::string(":server 300\r\n"))
#define RPL_AWAY(nick, awaymessage) (std::string(":server 301 ") + nick + " :" + awaymessage + "\r\n")
#define RPL_USERHOST(replies) (std::string(":server 302 :") + replies + "\r\n")
#define RPL_ISON(nicks) (std::string(":server 303 :") + nicks + "\r\n")
#define RPL_UNAWAY() (std::string(":server 305 :You are no longer marked as being away\r\n"))
#define RPL_NOWAWAY() (std::string(":server 306 :You have been marked as being away\r\n"))
#define RPL_WHOISUSER(nick, user, host, realname) (std::string(":server 311 ") + nick + " " + user + " " + host + " * :" + realname + "\r\n")
#define RPL_WHOISSERVER(nick, server, serverinfo) (std::string(":server 312 ") + nick + " " + server + " :" + serverinfo + "\r\n")
#define RPL_WHOISOPERATOR(nick) (std::string(":server 313 ") + nick + " :is an IRC operator\r\n")
#define RPL_WHOWASUSER(nick, user, host, realname) (std::string(":server 314 ") + nick + " " + user + " " + host + " * :" + realname + "\r\n")
#define RPL_ENDOFWHO(name) (std::string(":server 315 ") + name + " :End of /WHO list\r\n")
#define RPL_WHOISIDLE(nick, integer) (std::string(":server 317 ") + nick + " " + integer + " :seconds idle\r\n")
#define RPL_ENDOFWHOIS(nick) (std::string(":server 318 ") + nick + " :End of /WHOIS list\r\n")
#define RPL_WHOISCHANNELS(nick, channels) (std::string(":server 319 ") + nick + " :" + channels + "\r\n")
#define RPL_LISTSTART() (std::string(":server 321 Channel :Users Name\r\n"))
#define RPL_LIST(channel, visible, topic) (std::string(":server 322 ") + channel + " " + visible + " :" + topic + "\r\n")
#define RPL_LISTEND() (std::string(":server 323 :End of /LIST\r\n"))
#define RPL_CHANNELMODEIS(channel, mode, modeparams) (std::string(":server 324 ") + channel + " " + mode + " " + modeparams + "\r\n")
#define RPL_NOTOPIC(channel) (std::string(":server 331 ") + channel + " :No topic is set\r\n")
#define RPL_TOPIC(channel, topic) (std::string(":server 332 ") + channel + " :" + topic + "\r\n")
#define RPL_INVITING(channel, nick) (std::string(":server 341 ") + channel + " " + nick + "\r\n")
#define RPL_SUMMONING(user) (std::string(":server 342 ") + user + " :Summoning user to IRC\r\n")
#define RPL_VERSION(version, debuglevel, server, comments) (std::string(":server 351 ") + version + "." + debuglevel + " " + server + " :" + comments + "\r\n")
#define RPL_WHOREPLY(channel, user, host, server, nick, flags, hopcount, realname) (std::string(":server 352 ") + channel + " " + user + " " + host + " " + server + " " + nick + " " + flags + " :" + hopcount + " " + realname + "\r\n")
#define RPL_NAMREPLY(channel, nicks) (std::string(":server 353 ") + channel + " :" + nicks + "\r\n")
#define RPL_LINKS(mask, server, hopcount, serverinfo) (std::string(":server 364 ") + mask + " " + server + " :" + hopcount + " " + serverinfo + "\r\n")
#define RPL_ENDOFLINKS(mask) (std::string(":server 365 ") + mask + " :End of /LINKS list\r\n")
#define RPL_ENDOFNAMES(channel) (std::string(":server 366 ") + channel + " :End of /NAMES list\r\n")
#define RPL_BANLIST(channel, banid) (std::string(":server 367 ") + channel + " " + banid + "\r\n")
#define RPL_ENDOFBANLIST(channel) (std::string(":server 368 ") + channel + " :End of channel ban list\r\n")
#define RPL_ENDOFWHOWAS(nick) (std::string(":server 369 ") + nick + " :End of WHOWAS\r\n")
#define RPL_INFO(string) (std::string(":server 371 :") + string + "\r\n")
#define RPL_MOTD(text) (std::string(":server 372 :- ") + text + "\r\n")
#define RPL_ENDOFINFO() (std::string(":server 374 :End of /INFO list\r\n"))
#define RPL_MOTDSTART(server) (std::string(":server 375 :- ") + server + " Message of the day\r\n")
#define RPL_ENDOFMOTD() (std::string(":server 376 :End of /MOTD command\r\n"))
#define RPL_YOUREOPER() (std::string(":server 381 :You are now an IRC operator\r\n"))
#define RPL_REHASHING(configfile) (std::string(":server 382 ") + configfile + " :Rehashing\r\n")
#define RPL_TIME(server, time) (std::string(":server 391 ") + server + " :" + time + "\r\n")
#define RPL_USERSSTART() (std::string(":server 392 :UserID Terminal Host\r\n"))
#define RPL_USERS(user) (std::string(":server 393 :") + user + "\r\n")
#define RPL_ENDOFUSERS() (std::string(":server 394 :End of users\r\n"))
#define RPL_NOUSERS() (std::string(":server 395 :Nobody logged in\r\n"))
#define RPL_TRACELINK(version, destination, next_server) (std::string(":server 200 Link ") + version + " " + destination + " " + next_server + "\r\n")
#define RPL_TRACECONNECTING(class, server) (std::string(":server 201 Try. ") + class + " " + server + "\r\n")
#define RPL_TRACEHANDSHAKE(class, server) (std::string(":server 202 H.S. ") + class + " " + server + "\r\n")
#define RPL_TRACEUNKNOWN(class, ip) (std::string(":server 203 ???? ") + class + " [" + ip + "]\r\n")
#define RPL_TRACEOPERATOR(class, nick) (std::string(":server 204 Oper ") + class + " " + nick + "\r\n")
#define RPL_TRACEUSER(class, nick) (std::string(":server 205 User ") + class + " " + nick + "\r\n")
#define RPL_TRACESERVER(class, intS, intC, server, user, host) (std::string(":server 206 Serv ") + class + " " + intS + "S " + intC + "C " + server + " " + user + "@" + host + "\r\n")
#define RPL_TRACENEWTYPE(newtype, clientname) (std::string(":server 208 ") + newtype + " 0 " + clientname + "\r\n")
#define RPL_TRACELOG(logfile, debuglevel) (std::string(":server 261 File ") + logfile + " " + debuglevel + "\r\n")
#define RPL_STATSLINKINFO(linkname, sendq, sent_msg, sent_bytes, rec_msg, rec_bytes, time) (std::string(":server 211 ") + linkname + " " + sendq + " " + sent_msg + " " + sent_bytes + " " + rec_msg + " " + rec_bytes + " " + time + "\r\n")
#define RPL_STATSCOMMANDS(command, count) (std::string(":server 212 ") + command + " " + count + "\r\n")
#define RPL_STATSCLINE(host, name, port, class) (std::string(":server 213 C ") + host + " * " + name + " " + port + " " + class + "\r\n")
#define RPL_STATSNLINE(host, name, port, class) (std::string(":server 214 N ") + host + " * " + name + " " + port + " " + class + "\r\n")
#define RPL_STATSILINE(host, host2, port, class) (std::string(":server 215 I ") + host + " * " + host2 + " " + port + " " + class + "\r\n")
#define RPL_STATSKLINE(host, username, port, class) (std::string(":server 216 K ") + host + " * " + username + " " + port + " " + class + "\r\n")
#define RPL_STATSYLINE(class, ping, connect, max_sendq) (std::string(":server 218 Y ") + class + " " + ping + " " + connect + " " + max_sendq + "\r\n")
#define RPL_ENDOFSTATS(statsletter) (std::string(":server 219 ") + statsletter + " :End of /STATS report\r\n")
#define RPL_UMODEIS(usermodestring) (std::string(":server 221 ") + usermodestring + "\r\n")
#define RPL_STATSLLINE(hostmask, servername, maxdepth) (std::string(":server 241 L ") + hostmask + " * " + servername + " " + maxdepth + "\r\n")
#define RPL_STATSUPTIME() (std::string(":server 242 :Server Up %d days %d:%02d:%02d\r\n"))
#define RPL_STATSOLINE(hostmask, name) (std::string(":server 243 O ") + hostmask + " * " + name + "\r\n")
#define RPL_STATSHLINE(hostmask, servername) (std::string(":server 244 H ") + hostmask + " * " + servername + "\r\n")
#define RPL_LUSERCLIENT(users, invisible, servers) (std::string(":server 251 :There are ") + users + " users and " + invisible + " invisible on " + servers + " servers\r\n")
#define RPL_LUSEROP(operators) (std::string(":server 252 ") + operators + " :operator(s) online\r\n")
#define RPL_LUSERUNKNOWN(connections) (std::string(":server 253 ") + connections + " :unknown connection(s)\r\n")
#define RPL_LUSERCHANNELS(channels) (std::string(":server 254 ") + channels + " :channels formed\r\n")
#define RPL_LUSERME(clients, servers) (std::string(":server 255 :I have ") + clients + " clients and " + servers + " servers\r\n")
#define RPL_ADMINME(server) (std::string(":server 256 ") + server + " :Administrative info\r\n")
#define RPL_ADMINLOC1(info) (std::string(":server 257 :") + info + "\r\n")
#define RPL_ADMINLOC2(info) (std::string(":server 258 :") + info + "\r\n")
#define RPL_ADMINEMAIL(info) (std::string(":server 259 :") + info + "\r\n")

#endif
